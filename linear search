. Write a program for to perform liner search.
#include <stdio.h>
int main() {
    int arr[] = {2, 4, 7, 1, 9, 5};
    int target = 7;
    int n = sizeof(arr) / sizeof(arr[0]);
    int i, found = 0;
    for (i = 0; i < n; i++) {
        if (arr[i] == target) {
            found = 1;
            break;
        }
    }
    if (found)
        printf("Element found at index: %d", i);
    else
        printf("Element not found");
    return 0;
}
Output:
Element found at index: 2

40.Write a program to find out Hamiltonian circuit Using backtracking method
#include <stdio.h>
#define V 5
int path[V];
void printSolution() {
    for (int i = 0; i < V; i++) printf("%d ", path[i]);
    printf("%d\n", path[0]);
}
int isSafe(int v, int graph[V][V], int path[], int pos) {
    if (graph[path[pos - 1]][v] == 0) return 0;
    for (int i = 0; i < pos; i++) if (path[i] == v) return 0;
    return 1;
}
int hamCycleUtil(int graph[V][V], int path[], int pos) {
    if (pos == V) return (graph[path[pos - 1]][path[0]] == 1) ? 1 : 0;
    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;
            if (hamCycleUtil(graph, path, pos + 1) == 1) return 1;
            path[pos] = -1;
        }
    }
    return 0;
}
int hamCycle(int graph[V][V]) {
    for (int i = 0; i < V; i++) path[i] = -1;
    path[0] = 0;
    if (hamCycleUtil(graph, path, 1) == 0) {
        printf("No Hamiltonian Circuit exists\n");
        return 0;
    }
    printSolution();
    return 1;
}
int main() {
    int graph[V][V] = {
        {0, 1, 0, 1, 0},
        {1, 0, 1, 1, 1},
        {0, 1, 0, 0, 1},
        {1, 1, 0, 0, 1},
        {0, 1, 1, 1, 0}
    };
    hamCycle(graph);
    return 0;
}
Output:
0 1 2 4 3 0




